generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth Schema

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  refresh_token_expires_in Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                      String     @id @default(cuid())
  name                    String?
  bio                     String?    @db.Text
  age                     Int?
  email                   String?    @unique
  emailVerified           DateTime?
  image                   String?
  role                    Role @default(USER)
  accounts                Account[]
  sessions                Session[]
  activities              Activity[]
  challengeActivities    ChallengeActivity[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Sport {
  id         String     @id @default(cuid())
  name       String
  value      Int
  icon       String?
  activities Activity[]
}

model Activity {
  id           String   @id @default(cuid())
  score        Int
  duration     Int
  participants Int      @default(1)
  date         DateTime
  createdAt    DateTime @default(now())
  sportId      String
  userId       String
  sport        Sport    @relation(fields: [sportId], references: [id], onDelete: Cascade)
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Challenge {
  id                    String     @id @default(cuid())
  name                  String
  description           String
  value                 Int
  icon                  String?
  color                 String?
  startDate             DateTime
  endDate               DateTime
  challengeActivities  ChallengeActivity[]
}

model ChallengeActivity {
  score            Int
  success          Boolean
  createdAt        DateTime @default(now())
  challengeId      String
  userId           String
  challenge        Challenge    @relation(fields: [challengeId], references: [id], onDelete: Cascade)
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@id([challengeId, userId])
}

enum Role {
  USER
  ADMIN
}